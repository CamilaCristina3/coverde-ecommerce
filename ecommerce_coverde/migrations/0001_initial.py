# Generated by Django 5.2.2 on 2025-06-09 16:45

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import ecommerce_coverde.models.utilizador
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Utilizador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(error_messages={'unique': 'Já existe uma conta com este email.'}, max_length=254, unique=True, verbose_name='email address')),
                ('tipo', models.CharField(choices=[('C', 'Consumidor'), ('P', 'Produtor'), ('A', 'Administrador')], default='C', max_length=1, verbose_name='Tipo de Utilizador')),
                ('telefone', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Formato de telefone inválido. Use +351 123456789', regex='^\\+?[\\d\\s]{9,15}$')], verbose_name='Telefone')),
                ('nif', models.CharField(blank=True, max_length=9, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='NIF deve conter exatamente 9 dígitos', regex='^[0-9]{9}$')], verbose_name='NIF')),
                ('morada', models.TextField(blank=True, null=True, verbose_name='Morada')),
                ('codigo_postal', models.CharField(blank=True, max_length=8, null=True, validators=[django.core.validators.RegexValidator(message='Formato inválido. Use 1234-567', regex='^\\d{4}-\\d{3}$')], verbose_name='Código Postal')),
                ('localidade', models.CharField(blank=True, max_length=100, null=True, verbose_name='Localidade')),
                ('imagem_perfil', models.ImageField(blank=True, help_text='Imagem de perfil do utilizador', null=True, upload_to=ecommerce_coverde.models.utilizador.user_directory_path, verbose_name='Imagem de Perfil')),
                ('data_registo', models.DateTimeField(auto_now_add=True, db_column='data_registo', verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='ecommerce_utilizador_set', related_query_name='ecommerce_utilizador', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='ecommerce_utilizador_set', related_query_name='ecommerce_utilizador', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilizador',
                'verbose_name_plural': 'Utilizadores',
                'db_table': 'ecommerce_coverde_utilizadores',
                'ordering': ['-data_registo'],
            },
            managers=[
                ('objects', ecommerce_coverde.models.utilizador.UtilizadorManager()),
            ],
        ),
        migrations.CreateModel(
            name='Carrinho',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sessao_key', models.CharField(blank=True, max_length=40, null=True, verbose_name='Chave de Sessão')),
                ('criado_em', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('atualizado_em', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('utilizador', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='carrinhos', to=settings.AUTH_USER_MODEL, verbose_name='Utilizador')),
            ],
            options={
                'verbose_name': 'Carrinho',
                'verbose_name_plural': 'Carrinhos',
                'db_table': 'ecommerce_coverde_carrinho',
                'ordering': ['-atualizado_em'],
            },
        ),
        migrations.CreateModel(
            name='Categoria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text='Nome da categoria (mínimo 3 caracteres)', max_length=50, unique=True, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.RegexValidator(message='O nome deve conter apenas letras, números, espaços ou hífens', regex='^[\\w\\s-]+$')], verbose_name='Nome')),
                ('slug', models.SlugField(blank=True, help_text='Identificador único para URLs (gerado automaticamente)', max_length=60, unique=True, verbose_name='Slug')),
                ('descricao', models.TextField(blank=True, help_text='Descrição detalhada da categoria', verbose_name='Descrição')),
                ('icone', models.CharField(default='fa-leaf', help_text='Classe do ícone (ex: Font Awesome)', max_length=30, verbose_name='Ícone')),
                ('ordem_menu', models.PositiveSmallIntegerField(default=0, help_text='Ordem de exibição no menu (menor aparece primeiro)', verbose_name='Ordem no Menu')),
            ],
            options={
                'verbose_name': 'Categoria',
                'verbose_name_plural': 'Categorias',
                'db_table': 'ecommerce_coverde_categoria',
                'ordering': ['ordem_menu', 'nome'],
                'indexes': [models.Index(fields=['slug'], name='categoria_slug_idx'), models.Index(fields=['ordem_menu'], name='categoria_ordem_idx')],
            },
        ),
        migrations.CreateModel(
            name='Encomenda',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateTimeField(auto_now_add=True, verbose_name='Data da Encomenda')),
                ('estado', models.CharField(choices=[('P', 'Pendente'), ('R', 'Em Processamento'), ('E', 'Enviada'), ('D', 'Entregue'), ('C', 'Cancelada')], default='P', max_length=1, verbose_name='Estado')),
                ('observacoes', models.TextField(blank=True, verbose_name='Observações')),
                ('total', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Total da Encomenda')),
                ('consumidor', models.ForeignKey(limit_choices_to={'tipo': 'C'}, on_delete=django.db.models.deletion.PROTECT, related_name='encomendas', to=settings.AUTH_USER_MODEL, verbose_name='Consumidor')),
            ],
            options={
                'verbose_name': 'Encomenda',
                'verbose_name_plural': 'Encomendas',
                'db_table': 'ecommerce_coverde_encomenda',
                'ordering': ['-data'],
                'permissions': [('mudar_estado_encomenda', 'Pode alterar estado da encomenda')],
            },
        ),
        migrations.CreateModel(
            name='Pedido',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateTimeField(auto_now_add=True)),
                ('total', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('PENDENTE', 'Pendente'), ('PAGO', 'Pago'), ('ENVIADO', 'Enviado'), ('ENTREGUE', 'Entregue'), ('CANCELADO', 'Cancelado')], default='PENDENTE', max_length=10)),
                ('observacoes', models.TextField(blank=True, null=True)),
                ('metodo_pagamento', models.CharField(blank=True, max_length=20, null=True, verbose_name='Método de Pagamento')),
                ('consumidor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pedidos', to=settings.AUTH_USER_MODEL)),
                ('encomenda', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pedido', to='ecommerce_coverde.encomenda')),
            ],
            options={
                'verbose_name': 'Pedido',
                'verbose_name_plural': 'Pedidos',
                'db_table': 'ecommerce_coverde_pedido',
                'ordering': ['-data'],
            },
        ),
        migrations.CreateModel(
            name='Produto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome do Produto')),
                ('slug', models.SlugField(blank=True, max_length=120, unique=True, verbose_name='Slug do Produto')),
                ('descricao', models.TextField(verbose_name='Descrição')),
                ('preco', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Preço Unitário')),
                ('unidade', models.CharField(choices=[('kg', 'Quilograma'), ('g', 'Grama'), ('un', 'Unidade'), ('l', 'Litro'), ('ml', 'Mililitro')], max_length=2, verbose_name='Unidade de Medida')),
                ('stock', models.PositiveIntegerField(default=0, verbose_name='Stock Disponível')),
                ('imagem', models.ImageField(blank=True, upload_to='produtos/', verbose_name='Imagem do Produto')),
                ('data_colheita', models.DateField(blank=True, null=True, verbose_name='Data de Colheita/Produção')),
                ('certificado_biologico', models.BooleanField(default=False, verbose_name='Produto Biológico')),
                ('disponivel', models.BooleanField(default=True, verbose_name='Disponível para Venda')),
                ('destaque', models.BooleanField(default=False, verbose_name='Produto em Destaque')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('categoria', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='produtos', to='ecommerce_coverde.categoria', verbose_name='Categoria')),
                ('produtor', models.ForeignKey(limit_choices_to={'tipo': 'P'}, on_delete=django.db.models.deletion.CASCADE, related_name='produtos', to=settings.AUTH_USER_MODEL, verbose_name='Produtor')),
            ],
            options={
                'verbose_name': 'Produto',
                'verbose_name_plural': 'Produtos',
                'db_table': 'ecommerce_coverde_produto',
                'ordering': ['-destaque', '-data_criacao'],
            },
        ),
        migrations.CreateModel(
            name='ItemEncomenda',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantidade', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Quantidade')),
                ('preco_unitario', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Preço Unitário')),
                ('encomenda', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='itens', to='ecommerce_coverde.encomenda', verbose_name='Encomenda')),
                ('produto', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ecommerce_coverde.produto', verbose_name='Produto')),
            ],
            options={
                'verbose_name': 'Item de Encomenda',
                'verbose_name_plural': 'Itens de Encomenda',
                'db_table': 'ecommerce_coverde_item_encomenda',
            },
        ),
        migrations.CreateModel(
            name='ItemCarrinho',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantidade', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Quantidade')),
                ('preco_unitario', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Preço Unitário')),
                ('carrinho', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='itens', to='ecommerce_coverde.carrinho', verbose_name='Carrinho')),
                ('produto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce_coverde.produto', verbose_name='Produto')),
            ],
            options={
                'verbose_name': 'Item no Carrinho',
                'verbose_name_plural': 'Itens no Carrinho',
                'db_table': 'ecommerce_coverde_item_carrinho',
            },
        ),
        migrations.CreateModel(
            name='Favorito',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('criado_em', models.DateTimeField(auto_now_add=True)),
                ('utilizador', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favoritos', to=settings.AUTH_USER_MODEL)),
                ('produto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favoritos', to='ecommerce_coverde.produto')),
            ],
            options={
                'verbose_name': 'Favorito',
                'verbose_name_plural': 'Favoritos',
                'db_table': 'ecommerce_coverde_favorito',
            },
        ),
        migrations.AddIndex(
            model_name='utilizador',
            index=models.Index(fields=['email'], name='email_idx'),
        ),
        migrations.AddIndex(
            model_name='utilizador',
            index=models.Index(fields=['tipo'], name='tipo_utilizador_idx'),
        ),
        migrations.AddIndex(
            model_name='utilizador',
            index=models.Index(fields=['nif'], name='nif_idx'),
        ),
        migrations.AddIndex(
            model_name='produto',
            index=models.Index(fields=['disponivel', 'destaque'], name='ecommerce_c_disponi_375ee7_idx'),
        ),
        migrations.AddIndex(
            model_name='produto',
            index=models.Index(fields=['categoria', 'disponivel'], name='ecommerce_c_categor_5ac4fa_idx'),
        ),
        migrations.AddIndex(
            model_name='produto',
            index=models.Index(fields=['slug'], name='ecommerce_c_slug_96bf70_idx'),
        ),
        migrations.AddConstraint(
            model_name='produto',
            constraint=models.UniqueConstraint(fields=('slug',), name='unique_produto_slug'),
        ),
        migrations.AlterUniqueTogether(
            name='itemcarrinho',
            unique_together={('carrinho', 'produto')},
        ),
        migrations.AlterUniqueTogether(
            name='favorito',
            unique_together={('utilizador', 'produto')},
        ),
    ]
